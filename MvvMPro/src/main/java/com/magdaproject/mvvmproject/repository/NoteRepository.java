package com.magdaproject.mvvmproject.repository;

import android.app.Application;
import android.os.AsyncTask;

import com.magdaproject.mvvmproject.model.Note;

import java.util.List;

import androidx.lifecycle.LiveData;

public class NoteRepository {

    private NoteDao noteDao;

    private LiveData<List<Note>> allNotes;

    public NoteRepository(Application application) {
        NoteDatabase mDatabase = NoteDatabase.getInstance(application);
        noteDao = mDatabase.noteDao();//noteDao is autogenerated by Room when insatntiating the database
        allNotes = noteDao.getAllNotes();

    }//have to execute them in a background thread manually

    public void insert(Note note) {
       new InsertAsyncTask(noteDao).execute(note);
    }

    public void delete(Note note) {
        new DeleteAsyncTask(noteDao).execute(note);
    }

    public void update(Note note) {
        new UpdateAsyncTask(noteDao).execute(note);
    }

    public void deleteAll() {
        new DeleteAllAsyncTask(noteDao).execute();
    }

    public LiveData<List<Note>> getAllNotes() {/*operations that return LiveData are by deafault
    executed on a background thread(when dealing with room)*/
        return allNotes;
    }

    private static class InsertAsyncTask extends AsyncTask<Note, Void, Void> {
        private NoteDao mNoteDao;

        private InsertAsyncTask(NoteDao noteDao){
            mNoteDao = noteDao;
        }

        @Override
        protected Void doInBackground(Note... notes) {
          mNoteDao.insert(notes[0]);
          return null;
        }
    }

    private static class DeleteAsyncTask extends AsyncTask<Note, Void, Void> {
        private NoteDao mNoteDao;

        private DeleteAsyncTask(NoteDao noteDao){
            mNoteDao = noteDao;
        }

        @Override
        protected Void doInBackground(Note... notes) {
            mNoteDao.delete(notes[0]);
            return null;
        }
    }

    private static class UpdateAsyncTask extends AsyncTask<Note, Void, Void> {
        private NoteDao mNoteDao;

        private UpdateAsyncTask(NoteDao noteDao){
            mNoteDao = noteDao;
        }

        @Override
        protected Void doInBackground(Note... notes) {
            mNoteDao.update(notes[0]);
            return null;
        }
    }

    private static class DeleteAllAsyncTask extends AsyncTask<Void, Void, Void> {
        private NoteDao mNoteDao;

        private DeleteAllAsyncTask(NoteDao noteDao){
            mNoteDao = noteDao;
        }

        @Override
        protected Void doInBackground(Void... voids) {
            mNoteDao.deleteAll();
            return null;
        }
    }

}
